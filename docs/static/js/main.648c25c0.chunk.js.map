{"version":3,"sources":["constant/common.ts","constant/ui.ts","store/sample.ts","store/index.ts","route/index.tsx","component/atom/Spinner.tsx","component/template/Centering.tsx","component/molecule/CenterSpinner.tsx","page/Index.tsx","reagisterServiceWorker.ts","index.tsx"],"names":["isProduction","process","tourConfig","selector","content","makeStyles","stickTop","width","position","top","stickBottom","bottom","stickTopInTab","stickBottomInTab","empty","id","initialState","State","createSlice","name","reducers","reset","update","state","payload","actions","reducer","combineReducers","sample","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","concat","logger","devTools","Top","lazy","exact","path","component","status","children","direction","Grid","container","spacing","alignItems","justify","style","minHeight","text","Centering","Box","Spinner","mt","m","fallback","isLocalhost","Boolean","window","location","hostname","match","register","navigator","URL","href","origin","addEventListener","swUrl","fetch","then","response","headers","get","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","error","run","ReactDOM","render","StrictMode","Index","document","getElementById","registerServiceWorker","hasOwnProperty"],"mappings":"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","file":"static/js/main.648c25c0.chunk.js","sourcesContent":["// デバッグ用\nexport const END_POINT = process.env.NODE_ENV === 'production' ? '' : ''\n\nexport const isProduction = process.env.NODE_ENV === 'production'\n\nexport const tourConfig = [\n  {\n    selector: '.explanation',\n    content: `Ok, let's start with the name of the Tour that is about to begin.`,\n  },\n  {\n    selector: '.title',\n    content: `And this is our cool bus...`,\n  },\n  {\n    selector: '.aaa',\n    content: `And this is our cool bus...`,\n  },\n]\n","import { makeStyles } from '@material-ui/core'\n\nexport const useStyles: any = makeStyles({\n  stickTop: {\n    width: '100%',\n    position: 'fixed',\n    top: 0,\n  },\n  stickBottom: {\n    width: '100%',\n    position: 'fixed',\n    bottom: 0,\n  },\n  stickTopInTab: {\n    width: '100%',\n    position: 'fixed',\n    top: 50,\n  },\n  stickBottomInTab: {\n    width: '100%',\n    position: 'fixed',\n    bottom: 56,\n  },\n})\n","import { createSlice } from '@reduxjs/toolkit'\n\nexport type SampleState = {\n  id: string\n}\n\nexport const empty: SampleState = {\n  id: '',\n}\n\nexport const createSample = (): SampleState => ({ id: 'sample' })\n\nconst initialState: SampleState = {\n  ...empty,\n}\n\nconst State = createSlice({\n  name: 'edit',\n  initialState,\n  reducers: {\n    reset: () => ({ ...empty }),\n    update: (state: SampleState, { payload }) => ({ ...state, ...payload }),\n  },\n})\n\nexport default State.reducer\n\nexport const { reset, update } = State.actions\n","import { combineReducers } from 'redux'\nimport { configureStore } from '@reduxjs/toolkit'\nimport logger from 'redux-logger'\n\nimport { isProduction } from 'src/constant'\nimport sample from 'src/store/sample'\n\nconst reducer = combineReducers({\n  sample,\n})\n\n// getDefaultMiddleware: serializeエラーがスマホで発生するため\nconst store = configureStore({\n  reducer,\n  middleware: getDefaultMiddleware => {\n    return isProduction\n      ? getDefaultMiddleware({ serializableCheck: false })\n      : getDefaultMiddleware({ serializableCheck: false }).concat(logger)\n  },\n  devTools: isProduction,\n})\n\nexport default store\n\n// typeで使用\nexport * from 'src/store/sample'\n","import React, { lazy } from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nconst Top = lazy(() => import('src/page/Top'))\nconst NotFound = lazy(() => import('src/page/404'))\n\nexport default () => {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={Top} />\n\n      {/* {process.env.NODE_ENV === 'development' && (\n        <Route exact path=\"/gallery\" component={Gallery} />\n      )} */}\n      <Route component={Top} status={404} />\n    </Switch>\n  )\n}\n","import React from 'react'\nimport Spinner from 'react-md-spinner'\n\nexport default () => {\n  return <Spinner />\n}\n","import React from 'react'\nimport { Grid } from '@material-ui/core'\n\ninterface Props {\n  children: JSX.Element | React.FC\n  direction?: 'row' | 'row-reverse' | 'column' | 'column-reverse'\n}\n\nexport default ({ children, direction = 'row' }: Props) => {\n  return (\n    <Grid\n      container\n      spacing={0}\n      alignItems=\"center\"\n      justify=\"center\"\n      direction={direction}\n      style={{ minHeight: '80vh' }}\n    >\n      {children}\n    </Grid>\n  )\n}\n","import React from 'react'\nimport { Box } from '@material-ui/core'\nimport Spinner from 'src/component/atom/Spinner'\nimport Centering from 'src/component/template/Centering'\ninterface Props {\n  text?: string\n}\nexport default ({ text = '' }: Props) => {\n  return (\n    <Centering direction=\"column\">\n      <>\n        <Box>\n          <Spinner />\n        </Box>\n        <Box mt={3}>{text ?? <div>{text}</div>}</Box>\n      </>\n    </Centering>\n  )\n}\n","import React, { Suspense } from 'react'\nimport Route from 'src/route'\n\nimport { Box } from '@material-ui/core'\n\nimport Spinner from 'src/component/molecule/CenterSpinner'\nimport NavigationTop from 'src/component/template/NavigationTop'\nimport NavigationBottom from 'src/component/template/NavigationBottom'\n\nexport default () => {\n  // buildすると、なぜかRoute内にpyが付与されるので、分岐を追加\n  const padding = process.env.NODE_ENV === 'production' ? 0 : 6\n\n  return (\n    <>\n      {/* <NavigationTop /> */}\n      <Box m={1}>\n        <Suspense fallback={<Spinner />}>\n          <Route />\n        </Suspense>\n      </Box>\n      {/* <NavigationBottom /> */}\n    </>\n  )\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    // change window.location.href to '' when cordova\n    // const publicUrl = new URL(process.env.PUBLIC_URL, ' ')\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker?.onstatechange) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker?.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.')\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.')\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response?.headers?.get('content-type')?.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from 'src/store'\nimport { BrowserRouter } from 'react-router-dom'\nimport Index from 'src/page/Index'\nimport registerServiceWorker from 'src/reagisterServiceWorker'\nimport 'src/asset/scss/index.scss'\n\nconst run = () => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <BrowserRouter>\n          <Index />\n        </BrowserRouter>\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n  registerServiceWorker()\n}\n\n// eslint-disable-next-line no-prototype-builtins\nif (window.hasOwnProperty('cordova')) {\n  document.addEventListener('deviceready', run, false)\n} else {\n  run()\n}\n"],"sourceRoot":""}